generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  name           String?
  image          String?
  username       String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  mainCategories MainCategory[]
  rankingItems   RankingItem[]
  subCategories  SubCategory[]
}

model MainCategory {
  id             String                      @id @default(cuid())
  name           String
  userId         String
  isPublic       Boolean                     @default(true)
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
  user           User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemReferences MainCategoryItemReference[]
  rankingItems   RankingItem[]
  subCategories  SubCategory[]

  @@unique([name, userId])
}

model SubCategory {
  id             String        @id @default(cuid())
  name           String
  mainCategoryId String
  userId         String
  isPublic       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  rankingItems   RankingItem[]
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  mainCategory   MainCategory  @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)

  @@unique([name, mainCategoryId])
}

model RankingItem {
  id                     String                      @id @default(cuid())
  title                  String
  description            String?
  url                    String?
  position               Int?
  isPinned               Boolean                     @default(false)
  subCategoryId          String?
  mainCategoryId         String?
  userId                 String
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  mainCategoryReferences MainCategoryItemReference[]
  user                   User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  mainCategory           MainCategory?               @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)
  subCategory            SubCategory?                @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  images                 RankingItemImage[]
}

model RankingItemImage {
  id            String      @id @default(cuid())
  url           String
  rankingItemId String
  order         Int         @default(0)
  createdAt     DateTime    @default(now())
  rankingItem   RankingItem @relation(fields: [rankingItemId], references: [id], onDelete: Cascade)
}

model MainCategoryItemReference {
  id             String       @id @default(cuid())
  mainCategoryId String
  rankingItemId  String
  position       Int?
  createdAt      DateTime     @default(now())
  rankingItem    RankingItem  @relation(fields: [rankingItemId], references: [id], onDelete: Cascade)
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id], onDelete: Cascade)

  @@unique([mainCategoryId, rankingItemId])
}
